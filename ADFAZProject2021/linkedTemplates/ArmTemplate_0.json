{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFAZProject2021"
		},
		"LinkedService_KeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvazureproject.vault.azure.net/"
		},
		"LinkedService_Tiingo_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.tiingo.com/tiingo/"
		},
		"LinkedService_Tiingo_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "8558216d-445c-49ae-b341-ff8146c6d539"
		},
		"LinkedService_Tiingo_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "75099764-499a-4c9a-be3b-eb20119a46dd"
		},
		"LinkedService_Tiingo_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "8558216d-445c-49ae-b341-ff8146c6d539"
		},
		"azureprojectstorage_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "AzureStorageConnectionString"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LinkedService_KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LinkedService_KeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedService_Tiingo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LinkedService_Tiingo_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "AadServicePrincipal",
					"servicePrincipalId": "[parameters('LinkedService_Tiingo_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedService_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "ServicePrincipleSecret"
					},
					"tenant": "[parameters('LinkedService_Tiingo_properties_typeProperties_tenant')]",
					"aadResourceId": "[parameters('LinkedService_Tiingo_properties_typeProperties_aadResourceId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedService_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azureprojectstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedService_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('azureprojectstorage_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedService_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockUniverse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azureprojectstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "StockUniverse.csv",
						"folderPath": "CONTROL",
						"container": "datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Ticker",
						"type": "String"
					},
					{
						"name": "IsActive",
						"type": "String"
					},
					{
						"name": "LastUpdateDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azureprojectstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TiingoAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedService_Tiingo",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TiingoTargetDataURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().TiingoTargetDataURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedService_Tiingo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TiingoDataFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azureprojectstorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TiingoFileName": {
						"type": "string"
					},
					"TiingoRAWFolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TiingoFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n'RAW/Tiingo/',\ndataset().TiingoRAWFolder\n)",
							"type": "Expression"
						},
						"container": "datalake"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"date": {
							"type": "string"
						},
						"close": {
							"type": "number"
						},
						"high": {
							"type": "number"
						},
						"low": {
							"type": "number"
						},
						"open": {
							"type": "number"
						},
						"volume": {
							"type": "integer"
						},
						"adjClose": {
							"type": "number"
						},
						"adjHigh": {
							"type": "number"
						},
						"adjLow": {
							"type": "number"
						},
						"adjOpen": {
							"type": "number"
						},
						"adjVolume": {
							"type": "integer"
						},
						"divCash": {
							"type": "number"
						},
						"splitFactor": {
							"type": "number"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azureprojectstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TiingoEoDPricesBASE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azureprojectstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "BASE/EoDStockPrice",
						"container": "datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azureprojectstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TiingoFileRawLocation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azureprojectstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "RAW/Tiingo",
						"container": "datalake"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"columns": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"data": {
							"type": "array",
							"items": {
								"type": "array",
								"items": {
									"type": "integer"
								}
							}
						},
						"date": {
							"type": "string"
						},
						"close": {
							"type": "number"
						},
						"high": {
							"type": "number"
						},
						"low": {
							"type": "number"
						},
						"open": {
							"type": "number"
						},
						"volume": {
							"type": "integer"
						},
						"adjClose": {
							"type": "number"
						},
						"adjHigh": {
							"type": "number"
						},
						"adjLow": {
							"type": "number"
						},
						"adjOpen": {
							"type": "number"
						},
						"adjVolume": {
							"type": "integer"
						},
						"divCash": {
							"type": "number"
						},
						"splitFactor": {
							"type": "number"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azureprojectstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetData_Tiingo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Tiingo API Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Api Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TiingoAPI",
								"type": "DatasetReference",
								"parameters": {
									"TiingoTargetDataURL": {
										"value": "@concat(\n'daily/',\npipeline().parameters.TiingoTicker,\n'/prices?startDate=',\npipeline().parameters.TiingoStartDate,\n'&endDate=',\nutcnow('yyy-MM-dd'),\n'&token=',\nvariables('TiingoAPIKey')\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TiingoDataFile",
								"type": "DatasetReference",
								"parameters": {
									"TiingoFileName": {
										"value": "@concat(\npipeline().parameters.TiingoTicker,\n'.json'\n)",
										"type": "Expression"
									},
									"TiingoRAWFolder": {
										"value": "@utcnow('yyyyMMdd')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Tiingo API Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://kvazureproject.vault.azure.net/Secrets/TiingoAPIKey?api-version=7.1",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set Api Key",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Tiingo API Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TiingoAPIKey",
							"value": {
								"value": "@activity('Get Tiingo API Token').output.Value",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"TiingoTicker": {
						"type": "string"
					},
					"TiingoStartDate": {
						"type": "string"
					}
				},
				"variables": {
					"TiingoAPIKey": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TiingoAPI')]",
				"[concat(variables('factoryId'), '/datasets/TiingoDataFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move to BASE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TiingoFileRawLocation",
								"type": "DatasetReference"
							},
							"name": "RAWTiingo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TiingoEoDPricesBASE",
								"type": "DatasetReference"
							},
							"name": "WriteToBASE"
						}
					],
					"transformations": [
						{
							"name": "AddStockNameColumn"
						},
						{
							"name": "RemoveColumns"
						}
					],
					"script": "parameters{\n\tRawFolder as string\n}\nsource(output(\n\t\tcolumns as string[],\n\t\tdata as string[][],\n\t\tdate as string,\n\t\tclose as double,\n\t\thigh as double,\n\t\tlow as double,\n\t\topen as double,\n\t\tvolume as string,\n\t\tadjClose as double,\n\t\tadjHigh as double,\n\t\tadjLow as double,\n\t\tadjOpen as double,\n\t\tadjVolume as string,\n\t\tdivCash as double,\n\t\tsplitFactor as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tlimit: 100,\n\trowUrlColumn: 'FilePath',\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:[(concat('RAW/Tiingo/',$RawFolder,'/*'))]) ~> RAWTiingo\nRAWTiingo derive(Ticker = substring( left(FilePath, (length(FilePath)-5)), 22)) ~> AddStockNameColumn\nAddStockNameColumn select(mapColumn(\n\t\tdate,\n\t\tclose,\n\t\thigh,\n\t\tlow,\n\t\topen,\n\t\tvolume,\n\t\tadjClose,\n\t\tadjHigh,\n\t\tadjLow,\n\t\tadjOpen,\n\t\tadjVolume,\n\t\tdivCash,\n\t\tsplitFactor,\n\t\tTicker\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tTicker\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns\nRemoveColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($RawFolder,'_TiingoEodPrices.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> WriteToBASE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TiingoFileRawLocation')]",
				"[concat(variables('factoryId'), '/datasets/TiingoEoDPricesBASE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IngestDataPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Stock Universe",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "StockUniverse",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Active Stock",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter for Active Tickers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter for Active Tickers').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Execute Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GetData_Tiingo",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TiingoTicker": {
												"value": "@item().Ticker",
												"type": "Expression"
											},
											"TiingoStartDate": {
												"value": "@formatDateTime(item().LastUpdateDate,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter for Active Tickers",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup Stock Universe",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Stock Universe').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(\nitem().IsActive,\n'1'\n)",
								"type": "Expression"
							}
						}
					}
				],
				"concurrency": 5,
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/StockUniverse')]",
				"[concat(variables('factoryId'), '/pipelines/GetData_Tiingo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawToBasePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get RAW Tiingo Folder List",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "TiingoFileRawLocation",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "ForEach folder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get RAW Tiingo Folder List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get RAW Tiingo Folder List').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get All Folder Names",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "LatestRAWTiingoFolders",
										"value": {
											"value": "@int(item().name)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Find Latest Folder",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get All Folder Names",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "LatestRAWTiingoFolder",
										"value": {
											"value": "@string(\nmax(variables('LatestRAWTiingoFolders'))\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "DF Raw to Base",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Move to BASE",
								"type": "DataFlowReference",
								"parameters": {
									"RawFolder": {
										"value": "'@{variables('LatestRAWTiingoFolder')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"RAWTiingo": {},
									"WriteToBASE": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"LatestRAWTiingoFolders": {
						"type": "Array"
					},
					"LatestRAWTiingoFolder": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TiingoFileRawLocation')]",
				"[concat(variables('factoryId'), '/dataflows/Move to BASE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterOrchestrationPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "IngestDataPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Move from RAW to BASE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Ingest Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RawToBasePipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/IngestDataPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/RawToBasePipeline')]"
			]
		}
	]
}